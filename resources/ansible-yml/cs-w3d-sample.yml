# Ansible script to install w3d examples, as provide by Prof Jia
#
# cd /home/pi/PKC && ansible-playbook -i ./resources/config/hosts-pkc-dev ./resources/ansible-yml/cs-w3d-sample.yml
---
- name: Install PKC Web3D Example Docker instance
  hosts: all
  become: yes
  gather_facts: no
  vars:
    - docker_version: "latest"
    - retention: 1

  tasks:
  # first
  - name: Prepare w3d.conf
    delegate_to: localhost
    copy: 
      src: ../../config-template/w3d.conf
      dest: ../../config/w3d.conf

  - name: w3d.conf, put subdomain 1
    delegate_to: localhost
    ansible.builtin.replace:
      path: ../../config/w3d.conf
      regexp: '#W3D_SUBDOMAIN'
      replace: 'w3d.{{ hostvars[inventory_hostname].domain }}'

  - name: w3d.conf, put portNumber 1
    delegate_to: localhost
    ansible.builtin.replace:
      path: ../../config/w3d.conf
      regexp: '#PORT_NUMBER'
      replace: '32090'

  # second
  - name: Prepare w3d0.conf
    delegate_to: localhost
    copy: 
      src: ../../config-template/w3d.conf
      dest: ../../config/w3d0.conf

  - name: w3d0.conf, put subdomain 1
    delegate_to: localhost
    ansible.builtin.replace:
      path: ../../config/w3d0.conf
      regexp: '#W3D_SUBDOMAIN'
      replace: 'w3d0.{{ hostvars[inventory_hostname].domain }}'

  - name: w3d0.conf, put portNumber 1
    delegate_to: localhost
    ansible.builtin.replace:
      path: ../../config/w3d0.conf
      regexp: '#PORT_NUMBER'
      replace: '32091'

 # third
  - name: Prepare w3d1.conf
    delegate_to: localhost
    copy: 
      src: ../../config-template/w3d.conf
      dest: ../../config/w3d1.conf

  - name: w3d1.conf, put subdomain 3
    delegate_to: localhost
    ansible.builtin.replace:
      path: ../../config/w3d1.conf
      regexp: '#W3D_SUBDOMAIN'
      replace: 'w3d1.{{ hostvars[inventory_hostname].domain }}'

  - name: w3d1.conf, put portNumber 3
    delegate_to: localhost
    ansible.builtin.replace:
      path: ../../config/w3d1.conf
      regexp: '#PORT_NUMBER'
      replace: '32092'

  # fourth
  - name: Prepare w3d2.conf
    delegate_to: localhost
    copy: 
      src: ../../config-template/w3d.conf
      dest: ../../config/w3d2.conf

  - name: w3d.conf, put subdomain 1
    delegate_to: localhost
    ansible.builtin.replace:
      path: ../../config/w3d2.conf
      regexp: '#W3D_SUBDOMAIN'
      replace: 'w3d2.{{ hostvars[inventory_hostname].domain }}'

  - name: w3d2.conf, put portNumber 1
    delegate_to: localhost
    ansible.builtin.replace:
      path: ../../config/w3d2.conf
      regexp: '#PORT_NUMBER'
      replace: '32093'

  # uploading files to nginx folder
  - name: copy NGINX Configuration Files
    copy:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      follow: yes
    loop:
      - {src: '../../config/w3d.conf', dest: '/etc/nginx/sites-enabled/w3d.conf'}
      - {src: '../../config/w3d0.conf', dest: '/etc/nginx/sites-enabled/w3d0.conf'}
      - {src: '../../config/w3d1.conf', dest: '/etc/nginx/sites-enabled/w3d1.conf'}
      - {src: '../../config/w3d2.conf', dest: '/etc/nginx/sites-enabled/w3d2.conf'}
    become: true

  # running containers 1
  - name: running container
    command: "docker run --name=xlp_w3d --rm -d -p 32090:8080 kaikaiken/server-test:1.0"
    become: yes
    ignore_errors: yes
    register: output

  # running containers 2
  - name: running container
    command: "docker run --name=xlp_w3d0 --rm -d -p 32091:8080 kaikaiken/web3d-demo"
    become: yes
    ignore_errors: yes
    register: output

  # running containers 3
  - name: running container
    command: "docker run --name=xlp_w3d1 --rm -d -p 32092:8080 kaikaiken/g20-demo:latest"
    become: yes
    ignore_errors: yes
    register: output

  # running containers 4
  - name: running container
    command: "docker run --name=xlp_w3d2 --rm -d -p 32093:8080 kaikaiken/web3d-pkc:latest"
    become: yes
    ignore_errors: yes
    register: output
  
  - name: restart nginx
    service:
      name: nginx
      state: restarted

  - name: Create and Install Cert Using NGINX Plugin
    command: "certbot --nginx -d  {{ item }} -m {{ hostvars[inventory_hostname].email }} --agree-tos --noninteractive --redirect"
    with_items: 
    - "w3d.{{ hostvars[inventory_hostname].domain }}"
    - "w3d0.{{ hostvars[inventory_hostname].domain }}"
    - "w3d1.{{ hostvars[inventory_hostname].domain }}"
    - "w3d2.{{ hostvars[inventory_hostname].domain }}"

  - name: restart nginx
    service:
      name: nginx
      state: restarted

  

  ## Maintain only last x days retention, on agent server
  # - name: Backup retention "{{ hostvars[inventory_hostname].retention }}" days
  #   local_action: 
  #     command: find {{ ansible_env.PWD }}/backup -type f -mtime +{{ retention }} -delete # pwd #command "find /home/pi/PKC/backup -type f -mtime +{{ retention }} -delete"
  #   register: local_files

  # - name: Retention mysql backup to {{ retention }} day(s) on localhost
  #   delegate_to: localhost
  #   command: "find {{ ansible_env.PWD }}/cs/mountpoint/backup_restore/mariadb -type f -mtime +{{ retention }} -delete"
  #   become: yes
  #   register: output

  # - name: Retention mysql backup to {{ retention }} day(s)
  #   command: "find {{ ansible_env.PWD }}/cs/mountpoint/backup_restore/mariadb -type f -mtime +{{ retention }} -delete"
  #   become: yes
  #   register: output

  # - name: Retention image backup to {{ retention }} day(s)
  #   command: "find {{ ansible_env.PWD }}/cs/mountpoint/backup_restore/mediawiki -type f -mtime +{{ retention }} -delete"
  #   become: yes
  #   register: output

  # - name: debug
  #   debug:
  #     var: output

  # - name: debug-for src {{ hostvars[inventory_hostname].retention }}
  #   debug:
  #     var: hostvars[inventory_hostname].brl
  #   when: "hostvars[inventory_hostname].brl == 'src'"

  # - name: debug-for dst
  #   debug:
  #     var: hostvars[inventory_hostname].brl
  #   when: "hostvars[inventory_hostname].brl == 'dst'"

  ## Maintain only last x days retention
  # - name: Backup retention {{ retention }} days
  #   local_action: command find /home/pi/PKC/backup -type f -mtime +{{ retention }} -delete # pwd #command "find /home/pi/PKC/backup -type f -mtime +{{ retention }} -delete"
  #   register: local_files
  
  # - name: debug
  #   debug:
  #     var: local_files

  # - name: Create group
  #   group:
  #     name: "docker"
  #     state: present

  # - name: Adding user {{ ansible_user }}
  #   user: name="{{ ansible_user }}"
  #         groups=docker
  #         append=yes
  # - name: Ubuntu Installation Process
  #   block:
  #   - name: "apt-get update"
  #     apt:
  #       update_cache: yes
  #       cache_valid_time: 3600

  #   - name: "install nginx"
  #     apt:
  #       name: ['nginx','haveged']
  #       state: latest

  #   - name: Install aptitude using apt
  #     apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

  #   - name: Install required system packages
  #     apt: name={{ item }} state=latest update_cache=yes
  #     loop: [ 'apt-transport-https', 'ca-certificates ', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools', 'unzip']

  #   - name: Add Docker GPG apt Key
  #     apt_key:
  #       url: https://download.docker.com/linux/ubuntu/gpg
  #       state: present

  #   - name: Add Docker Repository
  #     apt_repository:
  #       repo: deb https://download.docker.com/linux/ubuntu bionic stable
  #       state: present

  #   - name: Update apt and install docker-ce
  #     apt: update_cache=yes name=docker-ce state=latest

  #   - name: Install Docker Module for Python
  #     pip:
  #       name: 
  #         - docker
  #         - docker-compose

  #   - name: install docker compose    
  #     get_url:
  #       url: https://github.com/docker/compose/releases/download/1.27.3/docker-compose-Linux-x86_64
  #       dest: /usr/local/bin/docker-compose
  #       mode: 755

  #   - name: "apt-get update"
  #     apt:
  #       update_cache: yes
  #       cache_valid_time: 3600

  #   - name: "install mysql client for backup/restore support"
  #     apt:
  #       name: ['mysql-client']
  #       state: present